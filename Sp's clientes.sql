
create table CXC_CLIENTE(
    CLI_CLIENTE NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    CLI_RAZON_SOCIAL VARCHAR (50),
    CLI_DIRECCION VARCHAR (50),
    CLI_TELEFONO VARCHAR (11),
    CLI_CORREO_ELECTRONICO VARCHAR (50),
    CLI_TIPO_CLIENTE VARCHAR (50),
    CLI_NIT VARCHAR (20),
    CLI_FECHA_CREACION date default sysdate,
    CLI_FECHA_ELIMINACION date default null,
    constraint cliente_pk primary key (CLI_CLIENTE)
);

create or replace type t_cxc_cliente_record as object (
    CLI_CLIENTE NUMBER,
    CLI_RAZON_SOCIAL VARCHAR (50),
    CLI_DIRECCION VARCHAR (50),
    CLI_TELEFONO VARCHAR (11),
    CLI_CORREO_ELECTRONICO VARCHAR (50),
    CLI_TIPO_CLIENTE VARCHAR (50),
    CLI_NIT VARCHAR (20),
    CLI_FECHA_CREACION date,
    CLI_FECHA_ELIMINACION date
);

create or replace type t_cxc_cliente_table as table of t_cxc_cliente_record;

create procedure pas_crear_cliente(
        p_razon_social CXC_CLIENTE.CLI_RAZON_SOCIAL%type,
        p_direccion CXC_CLIENTE.CLI_DIRECCION%type,
        p_telefono CXC_CLIENTE.CLI_TELEFONO%type,
        p_email CXC_CLIENTE.CLI_CORREO_ELECTRONICO%type,
        p_tipo_cliente CXC_CLIENTE.CLI_TIPO_CLIENTE%type,
        p_nit CXC_CLIENTE.CLI_NIT%type
    ) 
    is
        v_cliente_encontrado int;
    begin
        select 
                case when exists(select CLI_CLIENTE from CXC_CLIENTE where lower(CLI_CORREO_ELECTRONICO) = lower(p_email) and CLI_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_cliente_encontrado
            from dual;

        if (v_cliente_encontrado = 1) then
            raise_application_error(-20000, 'Ya se ha registrado un cliente con ese correo electronico');
        end if;

        insert into CXC_CLIENTE(CLI_RAZON_SOCIAL,CLI_DIRECCION,CLI_TELEFONO,CLI_CORREO_ELECTRONICO,CLI_TIPO_CLIENTE,CLI_NIT)
            values(p_razon_social, p_direccion, p_telefono, lower(p_email), p_tipo_cliente, p_nit)
        ;   
        
        commit;
end;

create procedure pas_actualizar_cliente(
        p_cliente CXC_CLIENTE.CLI_CLIENTE%type,
        p_razon_social CXC_CLIENTE.CLI_RAZON_SOCIAL%type,
        p_direccion CXC_CLIENTE.CLI_DIRECCION%type,
        p_telefono CXC_CLIENTE.CLI_TELEFONO%type,
        p_email CXC_CLIENTE.CLI_CORREO_ELECTRONICO%type,
        p_tipo_cliente CXC_CLIENTE.CLI_TIPO_CLIENTE%type,
        p_nit CXC_CLIENTE.CLI_NIT%type
    ) 
    is
        v_cliente_encontrado int;
        v_correo_duplicado int;
    begin
        select 
                case when exists(select CLI_CLIENTE from CXC_CLIENTE where CLI_CLIENTE = p_cliente and CLI_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_cliente_encontrado
            from dual;

        if (v_cliente_encontrado = 0) then
            raise_application_error(-20000, 'No se ha encontrado al cliente');
        end if;
        
        select 
                case when exists(select CLI_CLIENTE from CXC_CLIENTE where lower(cli_correo_electronico) = lower(p_email) and cli_cliente != p_cliente and CLI_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_correo_duplicado
            from dual;

        if (v_correo_duplicado = 1) then
            raise_application_error(-20000, 'El email ya se encuentra registrado');
        end if;

        update cxc_cliente 
        set 
            cli_razon_social = case when p_razon_social is null
                    then cli_razon_social
                    else p_razon_social
                end,
            cli_direccion = case when p_direccion is null
                    then cli_direccion
                    else p_direccion
                end,
            cli_telefono = case when p_telefono is null
                    then cli_telefono
                    else p_telefono
                end,
            cli_correo_electronico = case when p_email is null
                    then cli_correo_electronico
                    else lower(p_email)
                end,
            cli_tipo_cliente = case when p_tipo_cliente is null
                    then cli_tipo_cliente
                    else p_tipo_cliente
                end,
            cli_nit = case when p_nit is null
                    then cli_nit
                    else p_nit
                end
        where cli_cliente = p_cliente;
        
        commit;
end;

create procedure pas_eliminar_cliente(
        p_cliente CXC_CLIENTE.CLI_CLIENTE%type
    ) 
    is
        v_cliente_encontrado int;
    begin
        select 
                case when exists(select CLI_CLIENTE from CXC_CLIENTE where CLI_CLIENTE = p_cliente and CLI_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_cliente_encontrado
            from dual;

        if (v_cliente_encontrado = 0) then
            raise_application_error(-20000, 'No se ha encontrado al cliente');
        end if;

        update cxc_cliente 
        set cli_fecha_eliminacion = sysdate
        where cli_cliente = p_cliente;
        
        commit;
end;

CREATE OR REPLACE FUNCTION fas_listar_clientes RETURN t_cxc_cliente_table AS
   cursor c_cliente is select * from cxc_cliente where cli_fecha_eliminacion is null;
    v_tabla  t_cxc_cliente_table := t_cxc_cliente_table();
    v_CLIENTE CXC_CLIENTE.CLI_CLIENTE%type;
    v_RAZON_SOCIAL CXC_CLIENTE.CLI_RAZON_SOCIAL%type;
    v_DIRECCION CXC_CLIENTE.CLI_DIRECCION%type;
    v_TELEFONO CXC_CLIENTE.CLI_TELEFONO%type;
    v_CORREO_ELECTRONICO CXC_CLIENTE.CLI_CORREO_ELECTRONICO%type;
    v_TIPO_CLIENTE CXC_CLIENTE.CLI_TIPO_CLIENTE%type;
    v_NIT CXC_CLIENTE.CLI_NIT%type;
    v_FECHA_CREACION CXC_CLIENTE.CLI_FECHA_CREACION%type;
    v_FECHA_ELIMINACION CXC_CLIENTE.CLI_FECHA_ELIMINACION%type;
BEGIN
    open c_cliente;
        LOOP
            fetch c_cliente into v_CLIENTE,v_RAZON_SOCIAL,v_DIRECCION,v_TELEFONO,v_CORREO_ELECTRONICO,v_TIPO_CLIENTE,v_NIT,v_FECHA_CREACION,v_FECHA_ELIMINACION;
            exit when c_cliente %NOTFOUND;
            v_tabla.extend;
            v_tabla(v_tabla.last) := t_cxc_cliente_record(v_CLIENTE,v_RAZON_SOCIAL,v_DIRECCION,v_TELEFONO,v_CORREO_ELECTRONICO,v_TIPO_CLIENTE,v_NIT,v_FECHA_CREACION,v_FECHA_ELIMINACION);
        END LOOP;
    close c_cliente;
  RETURN v_tabla;
END;

CREATE OR REPLACE FUNCTION fas_buscar_id_cliente (p_id number) RETURN t_cxc_cliente_table AS
   cursor c_cliente is select * from cxc_cliente where cli_fecha_eliminacion is null and cli_cliente = p_id;
    v_tabla  t_cxc_cliente_table := t_cxc_cliente_table();
    v_CLIENTE CXC_CLIENTE.CLI_CLIENTE%type;
    v_RAZON_SOCIAL CXC_CLIENTE.CLI_RAZON_SOCIAL%type;
    v_DIRECCION CXC_CLIENTE.CLI_DIRECCION%type;
    v_TELEFONO CXC_CLIENTE.CLI_TELEFONO%type;
    v_CORREO_ELECTRONICO CXC_CLIENTE.CLI_CORREO_ELECTRONICO%type;
    v_TIPO_CLIENTE CXC_CLIENTE.CLI_TIPO_CLIENTE%type;
    v_NIT CXC_CLIENTE.CLI_NIT%type;
    v_FECHA_CREACION CXC_CLIENTE.CLI_FECHA_CREACION%type;
    v_FECHA_ELIMINACION CXC_CLIENTE.CLI_FECHA_ELIMINACION%type;
BEGIN
    open c_cliente;
        LOOP
            fetch c_cliente into v_CLIENTE,v_RAZON_SOCIAL,v_DIRECCION,v_TELEFONO,v_CORREO_ELECTRONICO,v_TIPO_CLIENTE,v_NIT,v_FECHA_CREACION,v_FECHA_ELIMINACION;
            exit when c_cliente %NOTFOUND;
            v_tabla.extend;
            v_tabla(v_tabla.last) := t_cxc_cliente_record(v_CLIENTE,v_RAZON_SOCIAL,v_DIRECCION,v_TELEFONO,v_CORREO_ELECTRONICO,v_TIPO_CLIENTE,v_NIT,v_FECHA_CREACION,v_FECHA_ELIMINACION);
        END LOOP;
    close c_cliente;
  RETURN v_tabla;
END;