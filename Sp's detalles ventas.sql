
create table CXC_DETALLE_VENTA (
    DEV_DETALLE_VENTA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    DEV_PRODUCTO NUMBER not null,
    DEV_VENTA NUMBER not null,
    DEV_CANTIDAD DECIMAL (12) not null,
    DEV_SUBTOTAL DECIMAL (12,2) not null,
    DEV_DESCUENTO DECIMAL (12,2) not null,
    DEV_FECHA_CREACION date default sysdate,
    DEV_FECHA_ELIMINACION date default null,
    constraint detalle_venta_pk primary key (DEV_DETALLE_VENTA),
    constraint detalle_venta_venta_fk foreign key (DEV_VENTA) references CXC_VENTA(VEN_VENTA),
    constraint detalle_venta_producto_fk foreign key (DEV_PRODUCTO) references CXC_PRODUCTO(PRO_PRODUCTO)
);

create or replace type t_cxc_venta_detalle_record as object (
    DEV_DETALLE_VENTA NUMBER,
    DEV_PRODUCTO NUMBER,
    VEN_NO_AUTORIZACION VARCHAR(50),
    DEV_VENTA NUMBER,
    PRO_DESCRIPCION VARCHAR(50),
    DEV_CANTIDAD DECIMAL(12),
    DEV_SUBTOTAL DECIMAL(12,2),
    DEV_DESCUENTO DECIMAL(12,2),
    DEV_FECHA_CREACION date,
    DEV_FECHA_ELIMINACION date
);

create or replace type t_cxc_venta_detalle_table as table of t_cxc_venta_detalle_record;

CREATE OR REPLACE FUNCTION fas_validar_credito_disponible (
        p_id IN cxc_cliente.cli_cliente%TYPE
    ) RETURN cxc_credito.cre_credito_disponible%type
    AS
        v_total_credito cxc_credito.cre_credito_disponible%type;
        v_credito_usado cxc_venta.ven_total %type;
    begin 
        select cc.cre_credito_disponible
            into v_total_credito
            from CXC_VENTA cv
            left join cxc_credito cc
                on cv.ven_cliente = cc.CLI_CLIENTE and cc.CRE_FECHA_ELIMINACION is null
            where cv.ven_venta = 2 and cv.VEN_FECHA_ELIMINACION is null
        ;
        
        select sum(total_usado) 
            into v_credito_usado
            from (select cv.ven_total - sum(case when ca.abo_abono is null then 0 else ca.abo_abono end) as total_usado
                from cxc_venta cv
                left join cxc_abono ca
                    on cv.ven_venta = ca.abo_venta and ca.abo_fecha_eliminacion is null
                where ven_cliente = p_id
                group by cv.ven_venta, cv.ven_total
            )
        ;
        
        return v_total_credito - v_credito_usado;
end;

create procedure pas_crear_detalle_venta(
        p_producto CXC_DETALLE_VENTA.DEV_PRODUCTO%type,
        p_venta CXC_DETALLE_VENTA.DEV_VENTA%type,
        p_cantidad CXC_DETALLE_VENTA.DEV_CANTIDAD%type,
        p_descuento CXC_DETALLE_VENTA.DEV_DESCUENTO%type
    ) 
    is
        v_producto_encontrado int;
        v_producto_existencia int;
        v_venta_encontrado int;
        v_venta_cerrada int;
        v_condicion_pago CXC_VENTA.VEN_CONDICION_PAGO%type;
        v_total_venta CXC_VENTA.VEN_TOTAL%type;
        v_cerrado CXC_VENTA.VEN_CERRADO%type;
        v_cliente CXC_VENTA.VEN_CLIENTE%type;
        v_subtotal CXC_DETALLE_VENTA.DEV_SUBTOTAL%type;
        v_cantidad cxc_producto.PRO_Cantidad%type;
        v_valor_producto cxc_producto.PRO_PRECIO%type;
        v_credito_disponible cxc_credito.cre_credito_disponible%type;
    begin
        select 
                case when exists(select PRO_PRODUCTO from CXC_PRODUCTO where PRO_PRODUCTO = p_producto and PRO_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_producto_encontrado
            from dual
        ;

        if (v_producto_encontrado = 0) then
            raise_application_error(-20000, 'El producto no se ha encontrado.');
        end if;

        select 
                case when exists(select VEN_VENTA from CXC_VENTA where VEN_VENTA = p_venta and VEN_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_venta_encontrado
            from dual
        ;

        if (v_venta_encontrado = 0) then
            raise_application_error(-20000, 'La venta no se ha encontrado.');
        end if;

        select VEN_TOTAL, VEN_CONDICION_PAGO
            into v_total_venta, v_condicion_pago 
            from CXC_VENTA 
            where VEN_VENTA = p_venta and VEN_FECHA_ELIMINACION is null
        ;

        select cp.PRO_CANTIDAD,
                cp.PRO_PRECIO
            into v_cantidad,
                v_valor_producto
            from CXC_PRODUCTO cp
            where cp.PRO_PRODUCTO = p_producto
        ;

        if (v_cantidad <= p_cantidad) then
            raise_application_error(-20000, 'No hay suficientes existencias del producto.');
        end if;

        select VEN_CERRADO
            into v_cerrado 
            from CXC_VENTA 
            where VEN_VENTA = p_venta and VEN_FECHA_ELIMINACION is null
        ;

        if (v_cerrado != 0) then
            raise_application_error(-20000, 'La venta ya fue cerrada.');
        end if;

        select fas_validar_credito_disponible(v_cliente) 
            into v_credito_disponible
            from dual
        ;

        v_subtotal := v_valor_producto * p_cantidad;

        if(p_descuento > 0) then
            v_subtotal := v_subtotal - (v_subtotal * p_descuento / 100);
        end if;

        if (v_credito_disponible < v_subtotal and v_condicion_pago = 'credito') then
            raise_application_error(-20000, 'El cliente no cuenta con el credito suficiente.');
        end if;

        insert into CXC_DETALLE_VENTA(DEV_PRODUCTO,DEV_VENTA,DEV_CANTIDAD,DEV_SUBTOTAL,DEV_DESCUENTO)
            values(p_producto,p_venta,p_cantidad,v_subtotal,p_descuento)
        ;

        update cxc_venta set ven_total = v_total_venta + v_subtotal where ven_venta = p_venta;
        update cxc_producto set pro_cantidad = v_cantidad - p_cantidad where pro_producto = p_producto;

        commit;
end;

create procedure pas_actualizar_detalle_venta(
        p_detalle_venta CXC_DETALLE_VENTA.DEV_DETALLE_VENTA%type,
        p_producto CXC_DETALLE_VENTA.DEV_PRODUCTO%type,
        p_venta CXC_DETALLE_VENTA.DEV_VENTA%type,
        p_cantidad CXC_DETALLE_VENTA.DEV_CANTIDAD%type,
        p_descuento CXC_DETALLE_VENTA.DEV_DESCUENTO%type
    ) 
    is
        v_detalle_venta_encontrado int;
        v_producto_encontrado int;
        v_producto_existencia int;
        v_venta_encontrado int;
        v_venta_cerrada int;
        v_condicion_pago CXC_VENTA.VEN_CONDICION_PAGO%type;
        v_total_venta CXC_VENTA.VEN_TOTAL%type;
        v_cerrado CXC_VENTA.VEN_CERRADO%type;
        v_cerrado_actual CXC_VENTA.VEN_CERRADO%type;
        v_cliente CXC_VENTA.VEN_CLIENTE%type;
        v_subtotal CXC_DETALLE_VENTA.DEV_SUBTOTAL%type;
        v_cantidad cxc_producto.PRO_Cantidad%type;
        v_valor_producto cxc_producto.PRO_PRECIO%type;
        v_credito_disponible cxc_credito.cre_credito_disponible%type;

        v_producto_actual CXC_DETALLE_VENTA.DEV_PRODUCTO%type;
        v_venta_actual CXC_DETALLE_VENTA.DEV_VENTA%type;
        v_cantidad_actual CXC_DETALLE_VENTA.DEV_CANTIDAD%type;
        v_descuento_actual CXC_DETALLE_VENTA.DEV_DESCUENTO%type;
        v_subtotal_actual CXC_DETALLE_VENTA.DEV_SUBTOTAL%type;
    begin
        select 
                case when exists(select dev_detalle_venta from cxc_detalle_venta where dev_detalle_venta = p_detalle_venta and dev_fecha_eliminacion is null)
                    then 1
                    else 0
                end
                into v_detalle_venta_encontrado
            from dual
        ;

        if (v_detalle_venta_encontrado = 0) then
            raise_application_error(-20000, 'El detalle no se ha encontrado.');
        end if;

        select DEV_PRODUCTO, DEV_VENTA DEV_CANTIDAD, DEV_CANTIDAD, DEV_DESCUENTO, DEV_SUBTOTAL
            into v_producto_actual, v_venta_actual, v_cantidad_actual, v_descuento_actual, v_subtotal_actual
            from cxc_detalle_venta 
            where dev_detalle_venta = p_detalle_venta and dev_fecha_eliminacion is null
        ;

        select ven_cerrado into v_cerrado_actual from cxc_venta where ven_venta = v_venta_actual;

        if (0 < v_cerrado_actual) then
            raise_application_error(-20000, 'La venta fue cerrada y no se puede modificar.');
        end if;

        update cxc_producto set pro_cantidad = pro_cantidad + v_cantidad_actual where pro_producto = v_producto_actual;
        update cxc_venta set ven_total = ven_total - v_subtotal_actual where ven_venta = v_venta_actual;

        select 
                case when p_producto is null or exists(select PRO_PRODUCTO from CXC_PRODUCTO where PRO_PRODUCTO = p_producto and PRO_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_producto_encontrado
            from dual
        ;

        if (v_producto_encontrado = 0) then
            raise_application_error(-20000, 'El producto no se ha encontrado.');
        end if;

        select 
                case when p_venta is null or exists(select VEN_VENTA from CXC_VENTA where VEN_VENTA = p_venta and VEN_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_venta_encontrado
            from dual
        ;

        if (v_venta_encontrado = 0) then
            raise_application_error(-20000, 'La venta no se ha encontrado.');
        end if;

        select VEN_TOTAL, VEN_CONDICION_PAGO, VEN_CERRADO, VEN_CLIENTE
            into v_total_venta, v_condicion_pago, v_cerrado, v_cliente
            from CXC_VENTA 
            where (VEN_VENTA = p_venta or (VEN_VENTA = v_venta_actual and p_venta is null))
        ;

        select cp.PRO_CANTIDAD,
                cp.PRO_PRECIO
            into v_cantidad,
                v_valor_producto
            from CXC_PRODUCTO cp
            where (cp.PRO_PRODUCTO = p_producto or (cp.PRO_PRODUCTO = v_producto_actual and p_producto is null))
        ;

        if (v_cantidad <= p_cantidad or (v_cantidad <= v_cantidad_actual and p_cantidad is null)) then
            raise_application_error(-20000, 'No hay suficientes existencias del producto.');
        end if;

        if (v_cerrado != 0) then
            raise_application_error(-20000, 'La venta ya fue cerrada.');
        end if;

        select fas_validar_credito_disponible(v_cliente) 
            into v_credito_disponible
            from dual
        ;

        v_subtotal := case 
                when p_cantidad is null then v_valor_producto * v_cantidad_actual
                else v_valor_producto * p_cantidad
            end
        ;

        if(p_descuento > 0 or (p_descuento is null and v_descuento_actual > 0)) then
            v_subtotal := case 
                    when p_descuento is null then v_subtotal - (v_descuento_actual * p_descuento / 100)
                    else v_subtotal - (v_subtotal * p_descuento / 100)
                end
            ;
        end if;

        if (v_credito_disponible < v_subtotal and v_condicion_pago = 'credito') then
            raise_application_error(-20000, 'El cliente no cuenta con el credito suficiente.');
        end if;

        update cxc_detalle_venta
                set DEV_PRODUCTO = case 
                        when p_producto is null then DEV_PRODUCTO
                        else p_producto
                    end,
                DEV_VENTA = case 
                        when p_venta is null then DEV_VENTA
                        else p_venta
                    end,
                DEV_CANTIDAD = case 
                        when p_cantidad is null then DEV_CANTIDAD
                        else p_cantidad
                    end,
                DEV_SUBTOTAL = v_subtotal,
                DEV_DESCUENTO = case 
                        when p_descuento is null then DEV_DESCUENTO
                        else p_descuento
                    end
            where dev_detalle_venta = p_detalle_venta
        ;

        update cxc_venta set ven_total = ven_total + v_subtotal where (VEN_VENTA = p_venta or (VEN_VENTA = v_venta_actual and p_venta is null));
        update cxc_producto set pro_cantidad = v_cantidad - p_cantidad where (PRO_PRODUCTO = p_producto or (PRO_PRODUCTO = v_producto_actual and p_producto is null));

        commit;
end;

create procedure pas_eliminar_detalle_venta(
        p_detalle_venta CXC_DETALLE_VENTA.DEV_DETALLE_VENTA%type
    )
    is
        v_detalle_venta_encontrado int;
        v_cerrado_actual CXC_VENTA.VEN_CERRADO%type;
        v_producto_actual CXC_DETALLE_VENTA.DEV_PRODUCTO%type;
        v_venta_actual CXC_DETALLE_VENTA.DEV_VENTA%type;
        v_cantidad_actual CXC_DETALLE_VENTA.DEV_CANTIDAD%type;
        v_subtotal_actual CXC_DETALLE_VENTA.DEV_SUBTOTAL%type;
    begin
        select 
                case when exists(select dev_detalle_venta from cxc_detalle_venta where dev_detalle_venta = p_detalle_venta and dev_fecha_eliminacion is null)
                    then 1
                    else 0
                end
                into v_detalle_venta_encontrado
            from dual
        ;

        if (v_detalle_venta_encontrado = 0) then
            raise_application_error(-20000, 'El detalle no se ha encontrado.');
        end if;

        select DEV_PRODUCTO, DEV_VENTA DEV_CANTIDAD, DEV_CANTIDAD, DEV_SUBTOTAL
            into v_producto_actual, v_venta_actual, v_cantidad_actual, v_subtotal_actual
            from cxc_detalle_venta 
            where dev_detalle_venta = p_detalle_venta and dev_fecha_eliminacion is null
        ;

        select ven_cerrado into v_cerrado_actual from cxc_venta where ven_venta = v_venta_actual;

        if (0 < v_cerrado_actual) then
            raise_application_error(-20000, 'La venta fue cerrada y no se puede modificar.');
        end if;

        update cxc_producto set pro_cantidad = pro_cantidad + v_cantidad_actual where pro_producto = v_producto_actual;
        update cxc_venta set ven_total = ven_total - v_subtotal_actual where ven_venta = v_venta_actual;

        update cxc_detalle_venta set dev_fecha_eliminacion = sysdate where dev_detalle_venta = p_detalle_venta;
end;

CREATE OR REPLACE FUNCTION fas_listar_detalles_venta (p_venta_id CXC_VENTA.VEN_VENTA%type) RETURN t_cxc_venta_detalle_table AS
    cursor c_detalle_venta is select cdv.DEV_DETALLE_VENTA,
            cdv.DEV_PRODUCTO,
            cv.VEN_NO_AUTORIZACION,
            cdv.DEV_VENTA,
            cp.PRO_DESCRIPCION,
            cdv.DEV_CANTIDAD,
            cdv.DEV_SUBTOTAL,
            cdv.DEV_DESCUENTO,
            cdv.DEV_FECHA_CREACION,
            cdv.DEV_FECHA_ELIMINACION
        from cxc_detalle_venta cdv
        inner join cxc_venta cv
            on cdv.dev_venta = cv.ven_venta and cv.ven_fecha_eliminacion is null
        inner join cxc_producto cp
            on cdv.dev_producto = cp.pro_producto and cp.pro_fecha_eliminacion is null
        where cv.ven_venta = p_venta_id and cdv.dev_fecha_eliminacion is null
    ;
    v_tabla  t_cxc_venta_detalle_table := t_cxc_venta_detalle_table();
    v_detalle_venta CXC_DETALLE_VENTA.DEV_DETALLE_VENTA%type;
    v_producto CXC_DETALLE_VENTA.DEV_PRODUCTO%type;
    v_no_autorizacion CXC_VENTA.VEN_NO_AUTORIZACION%type;
    v_venta CXC_DETALLE_VENTA.DEV_VENTA%type;
    v_descripcion CXC_PRODUCTO.PRO_DESCRIPCION%type;
    v_cantidad CXC_DETALLE_VENTA.DEV_CANTIDAD%type;
    v_subtotal CXC_DETALLE_VENTA.DEV_SUBTOTAL%type;
    v_descuento CXC_DETALLE_VENTA.DEV_DESCUENTO%type;
    v_fecha_creacion CXC_DETALLE_VENTA.DEV_FECHA_CREACION%type;
    v_fecha_eliminacion CXC_DETALLE_VENTA.DEV_FECHA_ELIMINACION%type;
BEGIN
    open c_detalle_venta;
        LOOP
            fetch c_detalle_venta into v_detalle_venta,v_producto,v_no_autorizacion,v_venta,v_descripcion,v_cantidad,v_subtotal,v_descuento,v_fecha_creacion,v_fecha_eliminacion;
            exit when c_detalle_venta %NOTFOUND;
            v_tabla.extend;
            v_tabla(v_tabla.last) := t_cxc_venta_detalle_record(v_detalle_venta,v_producto,v_no_autorizacion,v_venta,v_descripcion,v_cantidad,v_subtotal,v_descuento,v_fecha_creacion,v_fecha_eliminacion);
        END LOOP;
    close c_detalle_venta;
  RETURN v_tabla;
END;

CREATE OR REPLACE FUNCTION fas_buscar_detalle_venta (p_id CXC_DETALLE_VENTA.DEV_DETALLE_VENTA%type) RETURN t_cxc_venta_detalle_table AS
    cursor c_detalle_venta is select cdv.DEV_DETALLE_VENTA,
            cdv.DEV_PRODUCTO,
            cv.VEN_NO_AUTORIZACION,
            cdv.DEV_VENTA,
            cp.PRO_DESCRIPCION,
            cdv.DEV_CANTIDAD,
            cdv.DEV_SUBTOTAL,
            cdv.DEV_DESCUENTO,
            cdv.DEV_FECHA_CREACION,
            cdv.DEV_FECHA_ELIMINACION
        from cxc_detalle_venta cdv
        inner join cxc_venta cv
            on cdv.dev_venta = cv.ven_venta and cv.ven_fecha_eliminacion is null
        inner join cxc_producto cp
            on cdv.dev_producto = cp.pro_producto and cp.pro_fecha_eliminacion is null
        where cdv.DEV_DETALLE_VENTA = p_id and cdv.dev_fecha_eliminacion is null
    ;
    v_tabla  t_cxc_venta_detalle_table := t_cxc_venta_detalle_table();
    v_detalle_venta CXC_DETALLE_VENTA.DEV_DETALLE_VENTA%type;
    v_producto CXC_DETALLE_VENTA.DEV_PRODUCTO%type;
    v_no_autorizacion CXC_VENTA.VEN_NO_AUTORIZACION%type;
    v_venta CXC_DETALLE_VENTA.DEV_VENTA%type;
    v_descripcion CXC_PRODUCTO.PRO_DESCRIPCION%type;
    v_cantidad CXC_DETALLE_VENTA.DEV_CANTIDAD%type;
    v_subtotal CXC_DETALLE_VENTA.DEV_SUBTOTAL%type;
    v_descuento CXC_DETALLE_VENTA.DEV_DESCUENTO%type;
    v_fecha_creacion CXC_DETALLE_VENTA.DEV_FECHA_CREACION%type;
    v_fecha_eliminacion CXC_DETALLE_VENTA.DEV_FECHA_ELIMINACION%type;
BEGIN
    open c_detalle_venta;
        LOOP
            fetch c_detalle_venta into v_detalle_venta,v_producto,v_no_autorizacion,v_venta,v_descripcion,v_cantidad,v_subtotal,v_descuento,v_fecha_creacion,v_fecha_eliminacion;
            exit when c_detalle_venta %NOTFOUND;
            v_tabla.extend;
            v_tabla(v_tabla.last) := t_cxc_venta_detalle_record(v_detalle_venta,v_producto,v_no_autorizacion,v_venta,v_descripcion,v_cantidad,v_subtotal,v_descuento,v_fecha_creacion,v_fecha_eliminacion);
        END LOOP;
    close c_detalle_venta;
  RETURN v_tabla;
END;
