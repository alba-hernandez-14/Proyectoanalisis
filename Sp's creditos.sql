
CREATE TABLE CXC_CREDITO (
    CRE_CREDITO NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    CLI_CLIENTE NUMBER NOT NULL,
    CRE_CREDITO_DISPONIBLE number(12,2),
    CRE_PLAZO number(12),
    CRE_FECHA_CREACION date default sysdate,
    CRE_FECHA_ELIMINACION date default null,
    constraint credito_pk primary key (CRE_CREDITO),
    constraint credito_cliente_fk foreign key (CLI_CLIENTE) references CXC_CLIENTE(CLI_CLIENTE)
);

create or replace type t_cxc_credito_record as object ( //falta este
    CRE_CREDITO NUMBER,
    CLI_CLIENTE NUMBER,
    CLI_RAZON_SOCIAL varchar(50),
    CRE_CREDITO_DISPONIBLE number(12,2),
    CRE_PLAZO number(12),
    CRE_FECHA_CREACION date,
    CRE_FECHA_ELIMINACION date
);

create or replace type t_cxc_credito_table as table of t_cxc_credito_record;

create procedure pas_crear_credito(
        p_cliente CXC_CREDITO.CLI_CLIENTE%type,
        p_credito CXC_CREDITO.CRE_CREDITO_DISPONIBLE%type,
        p_plazo CXC_CREDITO.CRE_PLAZO%type
    ) 
    is
        v_cliente_encontrado int;
        v_credito_encontrado int;
    begin
        select 
                case when exists(select CLI_CLIENTE from CXC_CLIENTE where lower(CLI_CLIENTE) = lower(p_cliente) and CLI_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_cliente_encontrado
            from dual;

        if (v_cliente_encontrado = 0) then
            raise_application_error(-20000, 'El cliente no se ha encontrado.');
        end if;
        
        select 
                case when exists(select CRE_CREDITO from CXC_CREDITO where lower(CLI_CLIENTE) = lower(p_cliente) and CRE_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_credito_encontrado
            from dual;

        if (v_credito_encontrado = 1) then
            raise_application_error(-20000, 'El cliente ya cuenta con credito.');
        end if;

        insert into CXC_CREDITO(CLI_CLIENTE,CRE_CREDITO_DISPONIBLE,CRE_PLAZO)
            values(p_cliente,p_credito,p_plazo)
        ;   
        
        commit;
end;

create or replace procedure pas_actualizar_credito(
        p_credito CXC_CREDITO.CRE_CREDITO%type,
        p_cliente CXC_CREDITO.CLI_CLIENTE%type,
        p_credito_disponible CXC_CREDITO.CRE_CREDITO_DISPONIBLE%type,
        p_plazo CXC_CREDITO.CRE_PLAZO%type
    ) 
    is
        v_cliente_encontrado int;
        v_credito_encontrado int;
        v_cliente_duplicado int;
    begin
        select 
                case when p_cliente is null or exists(select CLI_CLIENTE from CXC_CLIENTE where CLI_CLIENTE = p_cliente and CLI_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_cliente_encontrado
            from dual;

        if (v_cliente_encontrado = 0) then
            raise_application_error(-20000, 'No se ha encontrado al cliente');
        end if;
        
        select 
                case when p_cliente is not null and exists(select CRE_CREDITO from CXC_CREDITO where cli_cliente = p_cliente and cre_credito != p_credito and CRE_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_cliente_duplicado
            from dual;

        if (v_cliente_duplicado = 1) then
            raise_application_error(-20000, 'El cliente ya tiene un credito asignado');
        end if;
        
        select 
                case when exists(select CRE_CREDITO from CXC_CREDITO where CRE_CREDITO = p_credito and CRE_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_credito_encontrado
            from dual;

        if (v_credito_encontrado = 0) then
            raise_application_error(-20000, 'No se ha encontrado al credito');
        end if;

        update cxc_credito
        set 
            cli_cliente = case when p_cliente is null
                    then cli_cliente
                    else p_cliente
                end,
            cre_credito_disponible = case when p_credito_disponible is null
                    then cre_credito
                    else p_credito_disponible
                end,
            cre_plazo = case when p_plazo is null
                    then cre_plazo
                    else p_plazo
                end
        where cre_credito = p_credito;
        
        commit;
end;

create procedure pas_eliminar_credito(
        p_credito CXC_CREDITO.CRE_CREDITO%type
    ) 
    is
        v_cliente_encontrado int;
    begin
        select 
                case when exists(select CRE_CREDITO from CXC_CREDITO where CRE_CREDITO = p_credito and CRE_FECHA_ELIMINACION is null)
                    then 1
                    else 0
                end
                into v_cliente_encontrado
            from dual;

        if (v_cliente_encontrado = 0) then
            raise_application_error(-20000, 'No se ha encontrado el credito');
        end if;

        update cxc_credito
        set cre_fecha_eliminacion = sysdate
        where cre_credito = p_credito;
        
        commit;
end;

CREATE OR REPLACE FUNCTION fas_listar_credito RETURN t_cxc_credito_table AS
    cursor c_credito is select cr.cre_credito,
            cr.cli_cliente,
            cl.cli_razon_social,
            cr.cre_credito_disponible,
            cr.cre_plazo,
            cr.cre_fecha_creacion,
            cr.cre_fecha_eliminacion
        from cxc_cliente cl 
        inner join cxc_credito cr
            on cl.cli_cliente = cr.cli_cliente
                and cr.cre_fecha_eliminacion is null
        where cl.cli_fecha_eliminacion is null
    ;
    v_tabla  t_cxc_credito_table := t_cxc_credito_table();
    v_CREDITO cxc_credito.CRE_CREDITO%type;
    v_CLIENTE cxc_credito.CLI_CLIENTE%type;
    v_RAZON_SOCIAL cxc_cliente.CLI_RAZON_SOCIAL%type;
    v_CREDITO_DISPONIBLE cxc_credito.CRE_CREDITO_DISPONIBLE%type;
    v_PLAZO cxc_credito.CRE_PLAZO%type;
    v_FECHA_CREACION cxc_credito.CRE_FECHA_CREACION%type;
    v_FECHA_ELIMINACION cxc_credito.CRE_FECHA_ELIMINACION%type;

BEGIN
    open c_credito;
        LOOP
            fetch c_credito into v_CREDITO,v_CLIENTE,v_RAZON_SOCIAL,v_CREDITO_DISPONIBLE,v_PLAZO,v_FECHA_CREACION,v_FECHA_ELIMINACION;
            exit when c_credito %NOTFOUND;
            v_tabla.extend;
            v_tabla(v_tabla.last) := t_cxc_credito_record(v_CREDITO,v_CLIENTE,v_RAZON_SOCIAL,v_CREDITO_DISPONIBLE,v_PLAZO,v_FECHA_CREACION,v_FECHA_ELIMINACION);
        END LOOP;
    close c_credito;
  RETURN v_tabla;
END;

CREATE OR REPLACE FUNCTION fas_buscar_credito (p_credito_id cxc_credito.CRE_CREDITO%type) RETURN t_cxc_credito_table AS
    cursor c_credito is select cr.cre_credito,
            cr.cli_cliente,
            cl.cli_razon_social,
            cr.cre_credito_disponible,
            cr.cre_plazo,
            cr.cre_fecha_creacion,
            cr.cre_fecha_eliminacion
        from cxc_cliente cl 
        inner join cxc_credito cr
            on cl.cli_cliente = cr.cli_cliente
                and cr.cre_fecha_eliminacion is null
        where cr.cre_credito = p_credito_id and cl.cli_fecha_eliminacion is null
    ;
    v_tabla  t_cxc_credito_table := t_cxc_credito_table();
    v_CREDITO cxc_credito.CRE_CREDITO%type;
    v_CLIENTE cxc_credito.CLI_CLIENTE%type;
    v_RAZON_SOCIAL cxc_cliente.CLI_RAZON_SOCIAL%type;
    v_CREDITO_DISPONIBLE cxc_credito.CRE_CREDITO_DISPONIBLE%type;
    v_PLAZO cxc_credito.CRE_PLAZO%type;
    v_FECHA_CREACION cxc_credito.CRE_FECHA_CREACION%type;
    v_FECHA_ELIMINACION cxc_credito.CRE_FECHA_ELIMINACION%type;

BEGIN
    open c_credito;
        LOOP
            fetch c_credito into v_CREDITO,v_CLIENTE,v_RAZON_SOCIAL,v_CREDITO_DISPONIBLE,v_PLAZO,v_FECHA_CREACION,v_FECHA_ELIMINACION;
            exit when c_credito %NOTFOUND;
            v_tabla.extend;
            v_tabla(v_tabla.last) := t_cxc_credito_record(v_CREDITO,v_CLIENTE,v_RAZON_SOCIAL,v_CREDITO_DISPONIBLE,v_PLAZO,v_FECHA_CREACION,v_FECHA_ELIMINACION);
        END LOOP;
    close c_credito;
  RETURN v_tabla;
END;